

function getUserInfo() {
    document.getElementById("browser").innerHTML = "Browser: " + navigator.userAgent;
    document.getElementById("language").innerHTML = "Language: " + navigator.language;
    document.getElementById("OS").innerHTML = "OS: " + navigator.platform;
    document.getElementById("resolution").innerHTML = "Resolution: " + window.screen.availWidth + "x" + window.screen.availHeight;

    navigator.geolocation.getCurrentPosition(geoSuccess, geoError);
    getUserIP(function(ip){
        console.log("test");
        alert("Got IP! :" + ip);
    });
    
    

}
function geoSuccess(pos) {
    var geoloclat = pos.coords.latitude;
    var geoloclong = pos.coords.longitude;
    document.getElementById("latitude").innerHTML = "Latitude: " + geoloclat;
    document.getElementById("longitude").innerHTML = "Longitude: " + geoloclong;

}
function geoError() {
    document.getElementById("latitude").innerHTML = "Kan inte h√§mta positionen"
}

/**
 * Get the user IP throught the webkitRTCPeerConnection
 * @param onNewIP {Function} listener function to expose the IP locally
 * @return undefined
 */
function getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs
    //compatibility for firefox and chrome

    var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
    var pc = new myPeerConnection({
        iceServers: []
    }),
    noop = function() {},
    localIPs = {},
    ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g, key;


    function iterateIP(ip) {
        if (!localIPs[ip]) onNewIP(ip);
        localIPs[ip] = true;
    }

     //create a bogus data channel
    pc.createDataChannel("");

    // create offer and set local description
    pc.createOffer().then(function(sdp) {
        sdp.sdp.split('\n').forEach(function(line) {
            if (line.indexOf('candidate') < 0) return;
            line.match(ipRegex).forEach(iterateIP);
        });
        
        pc.setLocalDescription(sdp, noop, noop);
    }).catch(function(reason) {
        // An error occurred, so handle the failure to connect
    });

    //listen for candidate events
    pc.onicecandidate = function(ice) {
        if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
        ice.candidate.candidate.match(ipRegex).forEach(iterateIP);
    };
}
const memBox = document.querySelectorAll(".memoryBox ");


function flipBox() {
    console.log("Click");
    this.classList.toggle("flip");
}

memBox.forEach(box => box.addEventListener("click", flipBox));